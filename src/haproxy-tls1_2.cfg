# Please note that there are a lot of possiblities where to put
# and how to write the configuration. I.e. you can provide
# a configuration at a global level or at a frontend/backend level.

# Use debug mode to inspect behaviour of HAProxy
global
	debug
	# The globally set default bind ciphers (ciphers used in bind directive)
	# The ciphers are split by a colon
	# An alternative configuration at frontend level is the `cipher` option
	# for the `bind` configuration
	ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384

	# This configuration is left out becuase our private network infrastructure
	# uses insecure HTTP connections. For this sample it is good enough to
	# terminate ssl traffic when reaching HAProxy. For production use you might
	# consider creating your own certificates and certificate authorities.
	# ssl-default-server-ciphers [...]

# Some basic default configuration
defaults
	log 	global
	mode    http
	timeout connect 5000
	timeout client 5000
	timeout server 5000
  
# Entry Point from the Internet
frontend main
	bind *:80
	# At least TLSv1.2 should be used (with certain ciphersuites deactivated)
	# For old clients (use case: Web Shop) TLSv1.1 can be considered
	bind *:443 ssl crt /etc/ssl/certs/certificate-chain.pem force-tlsv12
	# If connetion is insecure, forward to https
	# and return "Moved Permanantly" (301 status)
	http-request redirect scheme https code 301 unless { ssl_fc }

	# Serve web page of the default backend web
	default_backend app

# Defines load balancing to both Docker containers
backend app
	# Prevents server load to become too big
	# Returns status code 503, if wait time is exceeded
	timeout queue 10s
	
	# Load Balancer configuration
	# roundrobin translates to Rundlaufverfahren
	balance roundrobin
	
	# Define health check options
	# Make http request and check for status code 200
	# This configuration is very simple; more complex healtchecks
	# with i.e. databases checks can also be accomplished
	option httpchk GET /
	http-check expect status 200
	
	# Connects to the server with hostname apache-1 on port 80
	# check enables the health check for the server
	# maxconn activates the queuing of too many requests
	server srv1 apache-1:80 check maxconn 30
	server srv2 apache-2:80 check maxconn 30

	# HSTS Configuration -> Tells the browser
	# that a web page should only be accessed using HTTPS
	# max-age is set in seconds; includeSubDomains can be specified
	# This line of configuration is to prevent man-in-the-middle attacks
	# due to non-encrypted communication for the https redirect.
	# Otherwise, an attacker has the opportunity 
	# to change the original redirect address
	http-response set-header max-age=63072000
