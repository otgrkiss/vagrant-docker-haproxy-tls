---
- hosts: all
  # Run all non superuser tasks as vagrant user
  become: true
  become_user: vagrant
  # Define Variables for values that are likely to change over time
  vars:
    osaft_version: "19.01.19"
    docker_compose_version: "1.25.0"
    docker_compose_sha256: "2bdab0bbf42583b4b77ee015cf908933c78f0572a7cb949a7dd8e200e6250221"
    project_dir: "/home/vagrant/pki-projekt"
  tasks:
  # The installation steps are derived from the Docker manual
  - name: Install Docker and Compose
    become: true
    become_user: root
    block:
    - name: Install dependencies used by Docker
      apt:
        pkg:
        - apt-transport-https
        - ca-certificates
        - curl
        - gnupg-agent
        - software-properties-common
        update_cache: yes
    - name: Add Docker's GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
    - name: Add Docker Repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable"
    - name: Install Docker Engine - Community
      apt:
        pkg: ["docker-ce", "docker-ce-cli", "containerd.io"]
        update_cache: yes
    - name: Download Docker Compose
      get_url:
        url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64"
        dest: /usr/local/bin/docker-compose
        checksum: "sha256:{{docker_compose_sha256}}"
        mode: "+x"
  # SSL certificates are generated by a custom script
  - name: Generate SSL Certificate and DH Parameters
    block:
    - name: Add Execute Permission to PKI Project Script
      file:
        path: "{{ project_dir }}/create-certificate.sh"
        mode: u+x
    - name: Generate Certificates with provisioned script
      script:
        chdir: "{{ project_dir }}"
        cmd: "{{ project_dir }}/create-certificate.sh"
    - name: Genrate DH Parameters
      openssl_dhparam:
        path: "{{ project_dir }}/dhparams.pem"
        size: 2048
        force: yes
  - name: Install Docker Python Module and Start Containers
    become: yes
    become_user: root
    block:
    - name: Install docker and docker-compose required by Ansible via pip
      pip:
        name: ["docker", "docker-compose"]
    - name: Start Docker Compose Services
      docker_compose:
        project_src: "{{ project_dir }}"
        services:
        - haproxy
        - apache-1
        - apache-2
      register: output
